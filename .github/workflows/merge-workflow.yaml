# name: Auto Merge to Main

# on:
#   pull_request:
#     types:
#       - labeled
#     branches:
#       - dev

# jobs:
#   create-pr:
#     if: github.event.label.name == 'merge-to-main' && github.event.pull_request.merged == true
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout dev branch
#         uses: actions/checkout@v3
#         with:
#           ref: dev

#       - name: Install GitHub CLI
#         run: |
#           sudo apt update
#           sudo apt-get install -y gh


# In GitHub Actions runners, jq is usually pre-installed, especially on Ubuntu-based runners. However, if you want to ensure it's available or need to use a different runner where jq might not be installed, you can explicitly install it in your workflow.

# Here’s a step to install jq if you need to be sure it’s available:

# yaml
# Copy code
# - name: Install jq
#   run: sudo apt-get install -y jq
# You can include this step before the gh pr view command in your workflow.

# Updated Workflow with jq Installation
# yaml
# Copy code
# name: Auto Merge to Main

# on:
#   pull_request:
#     types:
#       - labeled
#     branches:
#       - dev

# jobs:
#   create-pr:
#     if: github.event.label.name == 'tested' && github.event.pull_request.merged == true
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout dev branch
#         uses: actions/checkout@v3
#         with:
#           ref: dev

      # - name: Install GitHub CLI
      #   run: |
      #     sudo apt-get install gh

      # - name: Install jq
      #   run: |
      #     sudo apt-get install -y jq

#       - name: Configure GitHub CLI
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           gh auth login --with-token <<< $GITHUB_TOKEN

#       - name: Cherry-pick PR commits
#         run: |
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
#           git config --global user.name "github-actions[bot]"

#           # Create a new branch from dev
#           git checkout -b auto-merge-pr-to-main

#           # Get the PR commit SHA(s)
#           PR_SHA=$(gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[0].oid')

#           # Cherry-pick the commit(s) from the PR
#           git cherry-pick $PR_SHA

#           # Resolve conflicts if any (this step is optional and may require customization)
#           # git commit -m "Resolve conflicts during cherry-pick" || true

#           # Push the new branch
#           git push origin auto-merge-pr-to-main

#       - name: Create Pull Request from new branch to main
#         run: |
#           gh pr create --base main --head auto-merge-pr-to-main --title "Auto Merge: PR to Main" --body "Automated PR to merge changes from the pull request into main after passing QA."

#       - name: Comment on the original PR
#         uses: actions/github-script@v6
#         with:
#           script: |
#             github.rest.issues.createComment({
#               issue_number: ${{ github.event.pull_request.number }},
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: "A new pull request has been automatically created to merge the changes from this pull request into main."
#             })





name: Auto Merge Specific PR to Main

on:
  pull_request:
    types:
      - labeled

jobs:
  merge-pr-to-main:
    if: github.event.label.name == 'merge-to-main' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all branches and history
        run: git fetch --all

      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      - name: Install jq
        run: |
          sudo apt-get install -y jq

      - name: Create a new branch from the specific PR commit
        run: |
          PR_SHA=${{ github.event.pull_request.merge_commit_sha }}
          git checkout -b pr-to-main $PR_SHA

      - name: Push branch to remote
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin pr-to-main

      - name: Create Pull Request from the PR commit to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create --base main --head pr-to-main --title "Auto Merge: PR #${{ github.event.pull_request.number }} to Main" --body "Automated PR to merge changes from PR #${{ github.event.pull_request.number }} to main after passing QA."

      - name: Comment on original PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "A new pull request has been automatically created to merge this PR into main."
            })
name: Auto Merge Specific PR to Main

on:
  pull_request:
    types:
      - labeled

jobs:
  merge-pr-to-main:
    if: github.event.label.name == 'merge-to-main' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all branches and history
        run: git fetch --all

      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      - name: Install jq
        run: |
          sudo apt-get install -y jq

      - name: Create a new branch from the specific PR commit
        run: |
          PR_SHA=${{ github.event.pull_request.merge_commit_sha }}
          git checkout -b pr-to-main $PR_SHA

      - name: List commits included in the PR
        run: |
          echo "Commits included in this PR:"
          git log main..pr-to-main --oneline

      - name: Show diff between main and pr-to-main
        run: |
          echo "Differences between main and pr-to-main:"
          git diff main..pr-to-main

      - name: Push branch to remote
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin pr-to-main

      - name: Create Pull Request from the PR commit to main
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          gh auth login --with-token <<<"${{ secrets.PAT_TOKEN }}"
          gh pr create --base main --head pr-to-main --title "Auto Merge: PR #${{ github.event.pull_request.number }} to Main" --body "Automated PR to merge changes from PR #${{ github.event.pull_request.number }} to main after passing QA."

      - name: Comment on original PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "A new pull request has been automatically created to merge this PR into main. The following commits are included in this PR:\n$(git log main..pr-to-main --oneline)\n\nAnd the diff is:\n$(git diff main..pr-to-main)"
            })
